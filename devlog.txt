
Team GET
Eric L
Truc D
Gian T
pd <4>
---------------------
Do Ya Feel Lucky? The Terminal Casino Adventure

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Built the first bot for blackjack (and make the bot winnier than people)! 
- Finished first complete game with all difficulties! 

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- LOW PRIORITY - If you enter more than one word for the name than it'll error and skip the amount of money being entered. Likely needs to be fix by checking the value entered. 
		 (FIXED -Truc)
- MEDIUM PRIORITY - Implmenting the try/catch statements in the driver since if an invalid input is put in, it'll skip over the option and leave it as null. Tedious work for little results for now. 
- MEDIUM PRIORITY - Medium mode bugs out in blackjack. 
- HIGH PRIORITY - Game fails to terminate after hitting a negative amount, or above a million. 
- HIGH PRIORITY - Connect Slots subclasses to driver / figure out how to connect them. 
- MEDIUM PRIORITY - Allow player to play Dice and Slots more than once without having to retype selection and bet. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- try/catch a Thread.sleep(long) allows for text to be printed at a timed manner. 

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Implemented the new interface "casinorules.java" to streamline connecting games with the driver. 
- Instead of poker which would take too long to perfect, I am coding war first. 
- Made Slots a super class instead of an abstract class or interface.
- Added class BingoPlayer instead of using one class for bingo

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- ArrayList is far better than arrays! When in doubt use ArrayList. 
- For ArrayList don't create it as just ArrayList name, since it'll think each thing is an object. 
- You can have a local variable with the same name as your instance variables. Don't do that.
- Start with MVP and add to it afterward.
||||||||||||||||||||||||||||||||||||||||||

 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================
Summary from before: The framework for the driver file was created and it was linked with blackjack. Blackjack and slots were mostly seperate games that only supported easy mode.

2017-01-11
--------------------------------------------------------------
Eric :: Added thread.sleep and accompanying helper function for Woo.java. 
	Added instructions in driver file.
	Built the both the easy and difficult bot and tested them out. Bots win 90% more games.
	Recoded the win condition to allow for multiple winners and thus making winnings vary from (6X to 1X the bet).
	
Truc :: Finished up dice functionality and connected dice with the driver and interface.
	Set up Slots.
	Set up dice difficulty levels.
	
Gian :: Began setting up cards for Bingo.
==============================================================

2017-01-12
--------------------------------------------------------------
Eric :: Completed the medium bot for blackjack. 
	Fixed resulting error from driver that would print “invalid input.”
	Added the ability to change your difficulty mid-game.	
	Fixed blackjack for easy mode.
	Completely finished blackjack. 
	Added war.java and completed 85%, only needs to add bot response and delayed print.
Truc :: Completed the Slots super class and connected it to the driver.
	Started writing the subclasses for Slots.
Gian ::
==============================================================

2017-01-13
--------------------------------------------------------------
Eric :: Added the instructions for Woo and allowed for win condition
	Allows for a cheat code in desperate times 
	Edited slots for some increased suspense and to print out the “process”
	Cleaned up blackjack, divides results better
Truc :: 
Gian ::
==============================================================

2017-01-14
--------------------------------------------------------------
Eric :: Tested out driver and accompanying games.
Truc :: 
Gian ::
==============================================================


2017-01-15
--------------------------------------------------------------
Eric :: Finished vanilla Keno (keno.java)
	Added an automated picker for Keno
Truc :: Completed two subclasses of Slots with added features for increased possible winnings.
	Implemented all subclasses into Slots superclass linked to driver.
Gian :: Added game setup, including functionality for filling and printing bingo cards
        Added mechanism for calling numbers in bingo
==============================================================

2017-01-16
--------------------------------------------------------------
Eric :: Finished and linked all of Keno to the driver.
	Added a pay table for different wins.
	Started a cleaned up readme for instructions
Truc :: Added Slots instructions into Woo.
	Fixed the name error. Added a small heading to the game. :)
	Updated readme.
Gian :: Added functionality for checking for numbers on bingo cards and marking them, checking for bingo, and winning the bingo game. Bingo can now be connected to driver.
==============================================================

2017-01-17
--------------------------------------------------------------
Eric :: Fixed some bugs in the driver when connecting with Bingo.
	Edited formatting for bingo and added a timed print function.	
Truc :: 
Gian :: 
==============================================================

